//You can remove the top function from the commands to get the entire output. 
//In addition, you can uncomment the last line to view the graphical representation in Log Analytics. 
//If using Power BI, you can do not need the last line render column charts. 
//Please note that if you are sending multiple synapse logs to the same workspace, you need to add the logical server name to the query to that results to not get mixed up


//Request run times
SynapseSqlPoolExecRequests
| where Category == 'ExecRequests'
| where StatementType !in ('Batch','Execute')
| summarize TimeGenerated=max(TimeGenerated),
Start_Time=max(StartTime),
End_Time=max(EndTime),
Command=max(Command),
Last_Status=min(Status),
Statement_Type=max(StatementType),
Resource_class=max(ResourceClass),
ExplainOutput=max(ExplainOutput)
by RequestId
| extend elapsedTime_min = (case(End_Time =='1/1/1601, 12:00:00.000 AM', now(),End_Time) - case(Start_Time =='1/1/1601, 12:00:00.000 AM', now(),Start_Time ))/1m
| where elapsedTime_min > 1
| order by elapsedTime_min desc

//Total row count 
SynapseSqlPoolRequestSteps
| where Category  == 'RequestSteps'
| where RowCount > 1
| project  TimeGenerated,LogicalServerName, RequestId, StepIndex, RowCount, Command
| order  by RowCount desc  



//Get the percentage of memory usage. Please note that you need to get the overall memory on your current systems DWU. You can use something like 
// select * from sys.dm_pdw_nodes_resource_governor_resource_pools and get that info from the default pool max memory KB and add it into the second line replacing 55481872 both times 

SynapseMemoryDW_CL 
| summarize abs(((todouble(55481872)-max(max_used_memory_kb_d))/todouble(55481872)*100) - (100))  by request_id_d,  bin(TimeGenerated, 5m) // please alter 55481872 to the correct memroy on the system, this should be dynamic next version
| project-rename percentused=Column1
| render columnchart with ( kind=stacked) 


//Stored procedure usage in minutes with a 30min window for TimeGenerated
SynapseStoredProcDW_CL
| summarize sum(total_elapsed_time_d)/60000000 by trim('.0' ,replace_regex(tostring(object_id_d),',', '')), bin(TimeGenerated, 30m)
| where Column2 >= 10
| project-rename sp_elapsed_time_min=Column2
| render columnchart with ( kind=stacked)



//Request runtime over query ID over compute level waits
SynapseSqlPoolExecRequests 
| where Category == 'ExecRequests'
| where StatementType !in ('Batch','Execute')
| summarize TimeGenerated=max(TimeGenerated),
SubmitTime=min(StartTime),
End_Time=max(EndTime),
Command=max(Command),
Last_Status=min(Status),
Statement_Type=max(StatementType),
Resource_class=max(ResourceClass)
by RequestId
| join kind=leftouter  (SynapseComputeWaitsDW_CL 
| project  request_id_s, bin(TimeGenerated, 5m),  wait_type_s, wait_time_d)
on $left.RequestId==$right.request_id_s 
| extend bin(TimeGenerated, 5m), elapsedTime_min = ((case(End_Time =='1/1/1601, 12:00:00.000 AM', now(),End_Time) - case(SubmitTime =='1/1/1601, 12:00:00.000 AM', now(),SubmitTime ))/1m) , elapsedTime_min_check = ((case(End_Time =='1/1/1601, 12:00:00.000 AM', now(),End_Time) - case(SubmitTime =='1/1/1601, 12:00:00.000 AM', now(),SubmitTime ))/1m)
| order by elapsedTime_min desc 
| summarize max(elapsedTime_min), sum(wait_time_d/60000)  by    request_id_s
| project-rename total_runtime_min=max_elapsedTime_min, total_wait_time_min=sum_
| top 30 by total_runtime_min desc 
//| render columnchart with ( kind=stacked)   


//Compute level waits, checks for waits over 5 seconds by RequestID aggregrations you can alter where condition time as needed. 
SynapseComputeWaitsDW_CL 
| where  wait_type_s != ''
| where toint(wait_time_d)/1000 > 5
| summarize   sum(toint(wait_time_d)/1000) by  wait_type_s , request_id_s
| project-rename max_wait_in_seconds=sum_
| render columnchart with ( kind=stacked  )


//Compute level waits, checks for waits over 5 seconds by TimeGenerated aggregrations you can alter where condition time as needed. 
SynapseComputeWaitsDW_CL 
| where  wait_type_s != ''
| where toint(wait_time_d)/1000 > 5
| summarize   sum(toint(wait_time_d)/1000) by  wait_type_s ,  bin(TimeGenerated, 5m)
| project-rename max_wait_in_seconds=sum_
| render columnchart with ( kind=stacked  )


//TempDB usage by Query ID only top 20 size in MB
SynapseTempDBDW_CL
| summarize  sum(Space_Allocated_For_User_Objects_MB_d) + sum( Space_Allocated_For_Internal_Objects_MB_d)/1024 by  bin(TimeGenerated, 15m),request_id_s 
| project-rename Total_TempDB_Usage=Column1
| order by Total_TempDB_Usage  desc
| project-rename TempDB_in_GB=Total_TempDB_Usage
| take 20
| render columnchart with ( kind=stacked)


//Resource waits longer than 1 minute by QID and time. 
SynapseWaitsDW_CL
    | project  request_id_s, type_s, bin(TimeGenerated, 5m), datetime_diff('minute', TimeGenerated,request_time_t)
	| project-rename minutes=Column1
    | where minutes > 1
   	| distinct request_id_s ,minutes,type_s,TimeGenerated
    | summarize sum(minutes) by  request_id_s,  bin(TimeGenerated, 5m)
    | project-rename wait_time_minutes=sum_minutes
| render columnchart  


//Resource waits longer than 1 minute by wait type and time.
SynapseWaitsDW_CL
    | project  request_id_s, type_s, bin(TimeGenerated, 5m), datetime_diff('minute', TimeGenerated,request_time_t)
	| project-rename minutes=Column1
    | where minutes > 1
   	| distinct request_id_s ,minutes,type_s,TimeGenerated
    | summarize sum(minutes) by  type_s,  bin(TimeGenerated, 5m)
    | project-rename wait_time_minutes=sum_minutes
| render columnchart  


//Resource waits longer than 1 minute by wait type and request ID, stacked.
SynapseWaitsDW_CL
    | project  request_id_s, type_s, bin(TimeGenerated, 5m), datetime_diff('minute', TimeGenerated,request_time_t)
	| project-rename minutes=Column1
    | where minutes > 1
   	| distinct request_id_s ,minutes,type_s,TimeGenerated
    | summarize sum(minutes) by  type_s,  request_id_s
    | project-rename wait_time_minutes=sum_minutes
| render columnchart  




--------------------------------------------------*****ONLY FOR Dedicated SQL pools (formerly SQL DW)******* ---------------------------------------------------------------
//Request runtime over query ID over compute level waits over time *****ONLY FOR Dedicated SQL pools (formerly SQL DW)******* 
AzureDiagnostics
| where Category == 'ExecRequests'
| where StatementType_s !in ('Batch','Execute')
| summarize TimeGenerated=max(TimeGenerated),
SubmitTime=min(SubmitTime_t),
End_Time=max(EndTime_t),
Command=max(Command_s),
Last_Status=min(Status_s),
Statement_Type=max(StatementType_s),
Resource_class=max(ResourceClass_s)
by RequestId_s
| join kind=leftouter  (SynapseComputeWaitsDW_CL 
| project  request_id_s, bin(TimeGenerated, 5m),  wait_type_s, wait_time_d)
on $left.RequestId_s==$right.request_id_s 
| extend bin(TimeGenerated, 5m), elapsedTime_min = ((case(End_Time =='1/1/1601, 12:00:00.000 AM', now(),End_Time) - case(SubmitTime =='1/1/1601, 12:00:00.000 AM', now(),SubmitTime ))/1m) , elapsedTime_min_check = ((case(End_Time =='1/1/1601, 12:00:00.000 AM', now(),End_Time) - case(SubmitTime =='1/1/1601, 12:00:00.000 AM', now(),SubmitTime ))/1m)
| order by elapsedTime_min desc 
| summarize max(elapsedTime_min), sum(wait_time_d/60000)  by    request_id_s, TimeGenerated
| project-rename total_runtime_min=max_elapsedTime_min, total_wait_time_min=sum_
| top 30 by total_runtime_min desc 
| render columnchart with ( kind=stacked) 

//Same as the above but over QID. *****ONLY FOR Dedicated SQL pools (formerly SQL DW)******* 
AzureDiagnostics
| where Category == 'ExecRequests'
| where StatementType_s !in ('Batch','Execute')
| summarize TimeGenerated=max(TimeGenerated),
SubmitTime=min(SubmitTime_t),
End_Time=max(EndTime_t),
Command=max(Command_s),
Last_Status=min(Status_s),
Statement_Type=max(StatementType_s),
Resource_class=max(ResourceClass_s)
by RequestId_s
| join kind=leftouter  (SynapseComputeWaitsDW_CL 
| project  request_id_s, bin(TimeGenerated, 5m),  wait_type_s, wait_time_d)
on $left.RequestId_s==$right.request_id_s 
| extend bin(TimeGenerated, 5m), elapsedTime_min = ((case(End_Time =='1/1/1601, 12:00:00.000 AM', now(),End_Time) - case(SubmitTime =='1/1/1601, 12:00:00.000 AM', now(),SubmitTime ))/1m) , elapsedTime_min_check = ((case(End_Time =='1/1/1601, 12:00:00.000 AM', now(),End_Time) - case(SubmitTime =='1/1/1601, 12:00:00.000 AM', now(),SubmitTime ))/1m)
| order by elapsedTime_min desc 
| summarize max(elapsedTime_min), sum(wait_time_d/60000)  by    request_id_s
| project-rename total_runtime_min=max_elapsedTime_min, total_wait_time_min=sum_
| top 30 by total_runtime_min desc 
| render columnchart with ( kind=stacked)  

